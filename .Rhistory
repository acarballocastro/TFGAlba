theme(text = element_text(size = 12),
axis.text.x = element_blank(), axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(), axis.title.x = element_blank())
scatterplot_topleft
scatterplot_topleft <-
ggplot(sv_correlation_df, aes(x = sv_marg_PTEDUCAT, y = sv_marg_FDG, color = valtemp)) +
geom_point(size = 1)+xlab("MSV PTEDUCAT")+ylab("MSV FDG")+
scale_x_continuous(limits = c(-1, 1), breaks = c(-1, 0, 1)) +
scale_y_continuous(limits = c(-5, 5), breaks = c(-5, 0, 5))  +
scale_color_gradient(low="blue", high="red") +
theme_minimal() +
theme(text = element_text(size = 12),
axis.text.x = element_blank(), axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(), axis.title.x = element_blank())
scatterplot_topleft
scatterplot_topleft <-
ggplot(sv_correlation_df, aes(x = sv_marg_PTEDUCAT, y = sv_marg_FDG, color = valtemp)) +
geom_point(size = 1)+xlab("MSV PTEDUCAT")+ylab("MSV FDG")+
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
scale_color_gradient(low="blue", high="red") +
theme_minimal() +
theme(text = element_text(size = 12),
axis.text.x = element_blank(), axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(), axis.title.x = element_blank())
scatterplot_topleft
scatterplot_topright <-
ggplot(sv_correlation_df, aes(x = sv_caus_FDG, y = sv_marg_PTEDUCAT, color = valtemp)) +
geom_point(size = 1) + scale_color_gradient(low="blue", high="red") +
xlab("CSV PTEDUCAT") + ylab("MSV PTEDUCAT") +
scale_x_continuous(limits = c(-1500, 1000), breaks = c(-1000, 0, 1000)) +
scale_y_continuous(limits = c(-500, 500), breaks = c(-500, 0, 500)) +
theme_minimal() +
theme(text = element_text(size=12), axis.title.x = element_blank(), axis.title.y=element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
scatterplot_topright
scatterplot_topright <-
ggplot(sv_correlation_df, aes(x = sv_caus_FDG, y = sv_marg_PTEDUCAT, color = valtemp)) +
geom_point(size = 1) + scale_color_gradient(low="blue", high="red") +
xlab("CSV PTEDUCAT") + ylab("MSV PTEDUCAT") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
theme_minimal() +
theme(text = element_text(size=12), axis.title.x = element_blank(), axis.title.y=element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
scatterplot_topright
cor(dataset)
scatterplot_bottomleft <-
ggplot(sv_correlation_df, aes(x = sv_marg_PTEDUCAT, y = sv_caus_PTEDUCAT, color = valtemp)) +
geom_point(size = 1) + scale_color_gradient(low="blue", high="red") +
ylab( "CSV PTEDUCAT") + xlab("MSV PTEDUCAT") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
theme_minimal() +
theme(text = element_text(size=12),
axis.text.x = element_text(size=12), axis.text.y = element_text(size=12))
scatterplot_bottomright <-
ggplot(sv_correlation_df, aes(x = sv_caus_FDG, y = sv_caus_PTEDUCAT, color = valtemp)) +
geom_point(size = 1) + ylab("CSV PTEDUCAT") + xlab( "CSV FDG") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
scale_color_gradient(low="blue", high="red")+
theme_minimal() +
theme(text = element_text(size=12), axis.text.x=element_text(size=12),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
grid_top <- ggarrange(scatterplot_topleft, scatterplot_topright, legend = "none")
grid_bottom <- ggarrange(scatterplot_bottomleft, scatterplot_bottomright, legend = "none")
grid_top
grid_bottom
sv_correlation_df <- data.frame(
valtemp = x_test[, "ABETA"],
sv_marg_FDG = explanation_marginal$dt$FDG,
sv_caus_FDG = explanation_causal$dt$FDG,
sv_marg_ABETA = explanation_marginal$dt$ABETA,
sv_caus_ABETA = explanation_causal$dt$ABETA
)
scatterplot_topleft <-
ggplot(sv_correlation_df, aes(x = sv_marg_ABETA, y = sv_marg_FDG, color = valtemp)) +
geom_point(size = 1)+xlab("MSV ABETA")+ylab("MSV FDG")+
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
scale_color_gradient(low="blue", high="red") +
theme_minimal() +
theme(text = element_text(size = 12),
axis.text.x = element_blank(), axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(), axis.title.x = element_blank())
scatterplot_topright <-
ggplot(sv_correlation_df, aes(x = sv_caus_FDG, y = sv_marg_ABETA, color = valtemp)) +
geom_point(size = 1) + scale_color_gradient(low="blue", high="red") +
xlab("CSV ABETA") + ylab("MSV ABETA") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
theme_minimal() +
theme(text = element_text(size=12), axis.title.x = element_blank(), axis.title.y=element_blank(),
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
scatterplot_bottomleft <-
ggplot(sv_correlation_df, aes(x = sv_marg_ABETA, y = sv_caus_ABETA, color = valtemp)) +
geom_point(size = 1) + scale_color_gradient(low="blue", high="red") +
ylab( "CSV ABETA") + xlab("MSV ABETA") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
theme_minimal() +
theme(text = element_text(size=12),
axis.text.x = element_text(size=12), axis.text.y = element_text(size=12))
scatterplot_bottomright <-
ggplot(sv_correlation_df, aes(x = sv_caus_FDG, y = sv_caus_ABETA, color = valtemp)) +
geom_point(size = 1) + ylab("CSV ABETA") + xlab( "CSV FDG") +
scale_x_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5)) +
scale_y_continuous(limits = c(-0.5, 0.5), breaks = c(-0.5, 0, 0.5))  +
scale_color_gradient(low="blue", high="red")+
theme_minimal() +
theme(text = element_text(size=12), axis.text.x=element_text(size=12),
axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
grid_top <- ggarrange(scatterplot_topleft, scatterplot_topright, legend = "none")
grid_bottom <- ggarrange(scatterplot_bottomleft, scatterplot_bottomright, legend = "none")
grid_top
grid_bottom
?xgboost
library(xgboost)
?xgboost
library(tidyverse)
library(ggpubr)
library(shapr)
#library(ggforce)
library(caret)
library(xgboost)
library(randomForest)
# For sina plotting capabilities
source("extra/sina_plot.R")
library(ranger)
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,-1] # Removing ID
head(dataset)
# Fixing covariables and response variable
x_var <- c("FDG","ABETA","PTAU","APOE4","PTGENDER","AGE","PTEDUCAT")
y_var <- "DXB" # Binary classification
# Splitting in train-test (80%-20%) ----
set.seed(2022)
train_index <- caret::createDataPartition(dataset$DXB, p = .8, list = FALSE, times = 1)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
y_train <- y_train_nc - mean(y_train_nc) # Tengo covariables categóricas
# Test data
x_test <- as.matrix(dataset[-train_index, x_var])
y_test_nc <- as.matrix(dataset[-train_index, y_var]) # not centered
y_test <- y_test_nc - mean(y_train_nc) # Tengo covariables categóricas
dataset$APOE4 = as.factor(dataset$APOE4)
dataset$PTGENDER = as.factor(dataset$PTGENDER)
dataset$DX = as.factor(dataset$DX)
head(dataset)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
# Test data
x_test <- as.matrix(dataset[-train_index, x_var])
y_test_nc <- as.matrix(dataset[-train_index, y_var]) # not centered
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = 1)
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,-1] # Removing ID
head(dataset)
dataset$APOE4 = as.factor(dataset$APOE4)
dataset$PTGENDER = as.factor(dataset$PTGENDER)
dataset$DX = as.factor(dataset$DX)
head(dataset)
# Fixing covariables and response variable
x_var <- c("FDG","ABETA","PTAU","APOE4","PTGENDER","AGE","PTEDUCAT")
y_var <- "DXB" # Binary classification
# Splitting in train-test (80%-20%) ----
set.seed(2022)
train_index <- caret::createDataPartition(dataset$DXB, p = .8, list = FALSE, times = 1)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
head(dataset)
dataset$DXB = as.factor(dataset$DXB)
head(dataset)
# Fixing covariables and response variable
x_var <- c("FDG","ABETA","PTAU","APOE4","PTGENDER","AGE","PTEDUCAT")
y_var <- "DXB" # Binary classification
train_index <- caret::createDataPartition(dataset$DXB, p = .8, list = FALSE, times = 1)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
y_train <- y_train_nc - mean(y_train_nc) # Tengo covariables categóricas
# Test data
x_test <- as.matrix(dataset[-train_index, x_var])
y_test_nc <- as.matrix(dataset[-train_index, y_var]) # not centered
modelrf <- ranger(x = x_train, y = y_train_nc, ntree=500)
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = 1)
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = FALSE)
x_train
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
y_train_nc
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = FALSE)
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,-1] # Removing ID
head(dataset)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = FALSE)
library(tidyverse)
library(ggpubr)
library(shapr)
#library(ggforce)
library(caret)
library(xgboost)
library(ranger)
# For sina plotting capabilities
source("extra/sina_plot.R")
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,-1] # Removing ID
head(dataset)
# Fixing covariables and response variable
x_var <- c("FDG","ABETA","PTAU","APOE4","PTGENDER","AGE","PTEDUCAT")
y_var <- "DXB" # Binary classification
# Splitting in train-test (80%-20%) ----
set.seed(2022)
train_index <- caret::createDataPartition(dataset$DXB, p = .8, list = FALSE, times = 1)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
# Test data
x_test <- as.matrix(dataset[-train_index, x_var])
y_test_nc <- as.matrix(dataset[-train_index, y_var]) # not centered
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = FALSE)
print(modelxgb)
explainer_symmetric <- shapr(x_train, modelxgb)
p <- mean(y_train)
p <- mean(y_train_nc)
# a. We compute the causal Shapley values on a given partial order (see paper)
partial_order <- list(c(5,4,6,7), c(2), c(1,3))
explanation_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_symmetric,
prediction_zero = p,
ordering = partial_order,
confounding = c(FALSE, TRUE, FALSE),
seed = 2020
)
sina_causal <- sina_plot(explanation_causal)
# save limits of sina_causal plot for comparing against marginal and asymmetric
ylim_causal <- sina_causal$coordinates$limits$y
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
# save limits of sina_causal plot for comparing against marginal and asymmetric
ylim_causal <- sina_causal$coordinates$limits$y
sina_causal
# a. We compute the causal Shapley values on a given partial order
partial_order <- list(c(5,4,6,7), c(2), c(1,3))
explanation_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_symmetric,
prediction_zero = p,
ordering = partial_order,
confounding = c(TRUE, FALSE, TRUE),
seed = 2020
)
sina_causal <- sina_plot(explanation_causal)
sina_causal
# save limits of sina_causal plot for comparing against marginal and asymmetric
ylim_causal <- sina_causal$coordinates$limits$y
p <- mean(y_train_nc) # Expected prediction
p
predict(modelxgb, x_train)
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal
sina_causal <- sina_plot(explanation_causal)
sina_causal
# c. Finally, we compute the asymmetric Shapley values for the same partial order
explainer_asymmetric <- shapr(x_train, modelxgb, asymmetric = TRUE, ordering = partial_order)
p <- mean(y_train)
p <- mean(y_train_nc)
explanation_asymmetric <- explain(
x_test,
approach = "gaussian",
explainer = explainer_asymmetric,
prediction_zero = p,
ordering = partial_order,
asymmetric = TRUE,
seed = 2020
)
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + title("Asymmetric conditional Shapley value")
sina_asymmetric
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + main("Asymmetric conditional Shapley value")
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + label("Asymmetric conditional Shapley value")
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric conditional Shapley value")
sina_asymmetric
# b. For computing marginal Shapley values, we assume one component with confounding
explanation_marginal <- explain(
x_test,
approach = "causal",
explainer = explainer_symmetric,
prediction_zero = p,
ordering = list(c(1:7)),
confounding = TRUE,
seed = 2020
)
sina_marginal <- sina_plot(explanation_marginal) +
coord_flip(ylim = ylim_causal) + ggtitle("Marginal Shapley value")
sina_marginal
explanation_asymmetric_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_asymmetric,
prediction_zero = p,
asymmetric = TRUE,
ordering = partial_order,
confounding = c(FALSE, TRUE, FALSE),
seed = 2020
)
sina_asymmetric_causal <- sina_plot(explanation_asymmetric_causal) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric causal Shapley value")
sina_asymmetric_causal
explanation_asymmetric_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_asymmetric,
prediction_zero = p,
asymmetric = TRUE,
ordering = partial_order,
confounding = c(TRUE, FALSE, TRUE),
seed = 2020
)
sina_asymmetric_causal <- sina_plot(explanation_asymmetric_causal) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric causal Shapley value")
sina_asymmetric_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric conditional Shapley value")
sina_asymmetric
library(tidyverse)
library(ggpubr)
library(shapr)
#library(ggforce)
library(caret)
library(xgboost)
library(ranger)
# For sina plotting capabilities
source("extra/sina_plot.R")
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,-1] # Removing ID
head(dataset)
# Fixing covariables and response variable
x_var <- c("FDG","ABETA","PTAU","APOE4","PTGENDER","AGE","PTEDUCAT")
y_var <- "DXB" # Binary classification
# Splitting in train-test (80%-20%) ----
set.seed(2022)
train_index <- caret::createDataPartition(dataset$DXB, p = .8, list = FALSE, times = 1)
# Training data
x_train <- as.matrix(dataset[train_index, x_var])
y_train_nc <- as.matrix(dataset[train_index, y_var]) # not centered
# Test data
x_test <- as.matrix(dataset[-train_index, x_var])
y_test_nc <- as.matrix(dataset[-train_index, y_var]) # not centered
modelxgb <- xgboost(data = x_train, label = y_train_nc, nround = 100, verbose = FALSE)
print(modelxgb)
explainer_symmetric <- shapr(x_train, modelxgb)
p <- mean(y_train_nc) # Expected prediction
# a. We compute the causal Shapley values on a given partial order
partial_order <- list(c(5,4,6,7), c(2), c(1,3))
explanation_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_symmetric,
prediction_zero = p,
ordering = partial_order,
confounding = c(TRUE, FALSE, TRUE),
seed = 2020
)
sina_causal <- sina_plot(explanation_causal)
sina_causal
# b. For computing marginal Shapley values, we assume one component with confounding
explanation_marginal <- explain(
x_test,
approach = "causal",
explainer = explainer_symmetric,
prediction_zero = p,
ordering = list(c(1:7)),
confounding = TRUE,
seed = 2020
)
# For sina plotting capabilities
source("extra/sina_plot.R")
sina_causal <- sina_plot(explanation_causal)
sina_causal
# save limits of sina_causal plot for comparing against marginal and asymmetric
ylim_causal <- sina_causal$coordinates$limits$y
sina_marginal <- sina_plot(explanation_marginal) +
coord_flip(ylim = ylim_causal) + ggtitle("Marginal Shapley values")
sina_marginal
# c. Finally, we compute the asymmetric Shapley values for the same partial order
explainer_asymmetric <- shapr(x_train, modelxgb, asymmetric = TRUE, ordering = partial_order)
p <- mean(y_train_nc)
explanation_asymmetric <- explain(
x_test,
approach = "gaussian",
explainer = explainer_asymmetric,
prediction_zero = p,
ordering = partial_order,
asymmetric = TRUE,
seed = 2020
)
sina_asymmetric <- sina_plot(explanation_asymmetric) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric conditional Shapley values")
sina_asymmetric
explanation_asymmetric_causal <- explain(
x_test,
approach = "causal",
explainer = explainer_asymmetric,
prediction_zero = p,
asymmetric = TRUE,
ordering = partial_order,
confounding = c(TRUE, FALSE, TRUE),
seed = 2020
)
sina_asymmetric_causal <- sina_plot(explanation_asymmetric_causal) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric causal Shapley values")
sina_asymmetric_causal
sina_asymmetric_causal <- sina_plot(explanation_asymmetric_causal) +
coord_flip(ylim = ylim_causal) + ggtitle("Asymmetric causal Shapley values")
sina_asymmetric_causal
