tabla = Anova(resultats, type="III")$anova
tabla[2,5]
mesura <- c(2003, 1999, 2000, 2007, 2008, 2004, 1999, 1999, 2004, 1996, 1994,
1994, 2009, 2009, 2005, 1993, 1991, 1995, 1996, 2003, 2000, 2005,
2004, 2013, 2003, 1999, 1999)
length(mesura)
cargol <- factor(rep(rep(1:3,each=3),3))
cargol
vascula <- factor(rep(1:3, each = 9))
vascula
data.frame(mesura, cargol, vascula)
resultats <- mixlm::lm(mesura ~ r(cargol)*r(vascula))
Anova(resultats, type="III")
Anova(resultats, type="III")$var.comps
rendiment <- c(66, 64, 63, 57, 60, 56, 62, 62, 58, 54, 73, 72, 42, 39, 47, 42,
39, 40, 47, 35, 44, 48, 51, 51, 31, 40, 44, 34, 34, 36, 25, 36,
43, 30, 54, 46)
centre <- factor(rep(1:3, each=12))
centre
entrenador <- factor(rep(1:3,each=4,3))
entrenador
data.frame(centre, entrenador)
resultats <- mixlm::lm(rendiment ~ r(centre) + r(entrenador)%in%r(centre))
Anova(resultats, type="III")
sum(Anova(resultats, type="III")$var.comps)
comb <- interaction(presion, temp)
# bartlett.test(res ~ presion)
# bartlett.test(res ~ temp)
bartlett.test(res ~ comb)
install.packages("flexdashboard")
library(flexdashboard)
library(renv)
install.packages("renv")
library(flexdashboard)
library(tidyverse)
library(readr)
read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv")
datos1 = read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv")
View(datos1)
datos1
datos12 = read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv", cols = (country = col_factor(), .default = col_integer(),
total_litres_of_pure_alcohol = col_double()))
datos12 = read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/alcohol-consumption/drinks.csv", col_types = cols(.default = col_integer(), country = col_factor(), total_litres_of_pure_alcohol = col_double()))
datos12
install.packages("installr")
library(installr)
updateR()
updateR()
list.of.packages <- c("tidyverse", "nycflights13")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(nycflights13)
data(flights, package = "nycflights13")
flights
head(flights)
flights %>%
filter(arr_time > 2*60)
flights %>%
filter(arr_delay > 2*60)
flights %>%
filter(origin %in% c("IAH", "HOU"))
flights
View(flights)
View(flights)
flights %>%
filter(dest %in% c("IAH", "HOU"))
flights %>%
filter(carrier %in% c("AA", "DL", "UA"))
flights %>%
filter(month %in% c(7,8,9))
View(flights)
flights %>%
filter(dep_delay == 0 $& arr_delay > 2*60)
flights %>%
filter(dep_delay == 0 & arr_delay > 2*60)
flights %>%
filter(between(dep_time, 0, 600))
flights %>%
arrange(., desc(distance))
flights %>%
arrange(., desc(distance))
flights %>%
arrange(distance)
flights %>%
arrange(distance) %>%
slice(1:10)
flights %>%
arrange(arr_delay) %>%
slice(1:10)
flights %>%
arrange(arr_delay, desc()) %>%
slice(1:10)
flights %>%
arrange(arr_delay, desc(arr_delay)) %>%
slice(1:10)
flights %>%
arrange(arr_delay, desc(arr_delay))
flights %>%
arrange(desc(arr_delay)) %>%
slice(1:10)
flights %>%
arrange(desc(arr_delay)) %>%
slice(1:5)
flights %>%
arrange(desc(arr_delay)) %>%
head(5)
flights %>%
arrange(desc(air_time/distance)) %>%
head(5) # Otra forma para seleccionar los 5 primeros
flights %>%
arrange(air_time/distance) %>%
head(5) # Otra forma para seleccionar los 5 primeros
flights %>%
arrange(desc(air_time/distance)) %>%
head() # Otra forma para seleccionar los 5 primeros
flights %>%
arrange(desc(air_time/distance)) %>%
head(1) # Otra forma para seleccionar los 5 primeros
flights %>%
arrange(!is.na(dep_time), dep_time)
flights
dep_time/100
flights$dep_time/100
floor(flights$dep_time/100)
flights %>%
mutate(dep_time_mid = floor(dep_time/100)*60)
flights %>%
mutate(dep_time_mid = floor(dep_time/100)*60 + (dep_time - floor(dep_time/100)*100))
flights$dep_time_mid
flights %>%
transmute(dep_time_mid = floor(dep_time/100)*60 + (dep_time - floor(dep_time/100)*100))
flights
flights %>%
transmute(dep_time_mid = floor(dep_time/100)*60 + (dep_time - floor(dep_time/100)*100),
sched_dep_time_mid = floor(sched_dep_time/100)*60 + (sched_dep_time - floor(sched_dep_time/100)*100))
library(tidyverse)
library(nycflights13)
data(flights, package = "nycflights13")
head(flights)
View(flights)
View(flights)
flights %>%
mutate(sched_dep_time_mid = hour*60 + minute,
dep_time_mid = hour*60 + minute + dep_delay)
flights %>%
mutate(sched_dep_time_mid = hour*60 + minute,
dep_time_mid = hour*60 + minute + dep_delay) %>%
select(dep_time, dep_time_mid, sched_dep_time, sched_dep_time_mid, hour, minute, dep_delay)
flights %>%
mutate(dep_time_mid = floor(dep_time/100)*60 + (dep_time - floor(dep_time/100)*100),
sched_dep_time_mid = floor(sched_dep_time/100)*60 + (sched_dep_time - floor(sched_dep_time/100)*100)) %>%
select(dep_time, dep_time_mid, sched_dep_time, sched_dep_time_mid)
flights %>% group_by(day) %>%
first(dep_time)
flights %>% group_by(day, dep_time) %>%
first(dep_time)
flights %>% group_by(day) %>%
summartise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
flights %>% group_by(day) %>%
summarise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
flights %>% group_by(day) %>%
summarise(primer_vuelo = first(!is.na(dep_time)),
ultimo_vuelo = last(!is.na(dep_time)))
flights %>% group_by(day) %>%
summarise(primer_vuelo = first(na.rm(dep_time)),
ultimo_vuelo = last(!is.na(dep_time)))
flights %>% group_by(day) %>%
summarise(primer_vuelo = first(dep_time, na.rm = T),
ultimo_vuelo = last(!is.na(dep_time)))
flights %>% group_by(day) %>%
summarise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
no_cancelados %>% group_by(day) %>%
summarise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
no_cancelados <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
no_cancelados %>% group_by(day) %>%
summarise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay)) %>%
group_by(day) %>%
summarise(primer_vuelo = first(dep_time),
ultimo_vuelo = last(dep_time))
flights %>%
group_by(dest) %>%
count(carrier)
flights %>%
group_by(dest, carrier) %>%
summarise(vuelos = n())
flights %>%
group_by(dest, carrier) %>%
summarise(vuelos = n())
flights %>%
group_by(dest) %>%
summarise(vuelos = count(carrier))
flights %>%
group_by(dest) %>%
summarise(vuelos = n(carrier))
flights %>%
group_by(dest) %>%
count(carrier)
flights %>%
group_by(dest) %>%
count(carrier) %>%
count(dest)
flights %>%
group_by(dest) %>%
count(carrier)
flights %>%
group_by(dest) %>%
count(carrier) %>%
count(dest) %>% arrange()
flights %>%
group_by(dest) %>%
count(carrier) %>%
count(dest) %>% arrange(n)
flights %>%
group_by(dest) %>%
count(carrier) %>%
count(dest) %>% arrange(n, desc(n))
flights %>%
group_by(dest) %>%
count(carrier) %>%
count(dest) %>% arrange(desc(n))
(retraso_salida <- flights %>%
group_by(dest) %>%
summarise(num_vuelos = n(),
dist_media = mean(distance, na.rm = TRUE),
ret_medio = mean(dep_delay, na.rm = TRUE)
) %>%
filter(num_vuelos > 20, dest != "HNL"))
retraso_salida %>%
ggplot(aes(x = dist_media, y = ret_medio)) +
geom_point(aes(size = num_vuelos), alpha = 1/3) +
geom_smooth(se = FALSE)
(retraso_salida <- flights %>%
group_by(dest) %>%
summarise(num_vuelos = n(),
dist_media = mean(distance, na.rm = TRUE),
ret_medio_salida = mean(dep_delay, na.rm = TRUE)
) %>%
filter(num_vuelos > 20, dest != "HNL"))
retraso_salida %>%
ggplot(aes(x = dist_media, y = ret_medio_salida)) +
geom_point(aes(size = num_vuelos), alpha = 1/3) +
geom_smooth(se = FALSE)
library(tidyverse)
library(forecats) # Dentro de tidyverse
library(forcats) # Dentro de tidyverse
gss_cat
head(gss_cat) # Datos
gss_cat %>%
count(relig) %>% # Hacemos que cuente las religiones
arrange(desc(n)) %>% # Ordenamos descendentemente
head(1)
gss_cat %>%
count(relig) %>% # Hacemos que cuente las religiones
arrange(desc(n)) %>% # Ordenamos descendentemente
first()
gss_cat %>%
count(relig) %>% # Hacemos que cuente las religiones
arrange(desc(n))
gss_cat %>%
count(relig) %>% # Hacemos que cuente las religiones
arrange(desc(n)) %>% # Ordenamos descendentemente
slice_head()
gss_cat %>%
count(relig) %>% # Hacemos que cuente las religiones
arrange(desc(n)) %>% # Ordenamos descendentemente
slice_head() # head(1) también habría valido
gss_cat %>%
count(partyid) %>% # Hacemos que cuente las religiones
arrange(desc(n)) %>% # Ordenamos descendentemente
slice_head()
gss_cat <- gss_cat %>%
select_if(is.factor)
gss_cat %>%
select_if(is.factor)
head(gss_cat) # Datos
library(tidyverse) # forcats esta dentro
head(gss_cat) # Datos
library(tidyverse) # forcats esta dentro
head(gss_cat) # Datos
library(tidyverse) # forcats esta dentro
head(gss_cat) # Datos
gss_cat %>%
select_if(is.factor)
gss_cat %>%
select_if(is.factor) %>%
colnames()
# Marital
levels(gss_cat[["marital"]])
gss_cat %>%
select(tvhours) %>%
summary
head(gss_cat) # Datos
str(gss_cat)
gss_cat %>%
select(tvhours) %>%
summary
gss_cat %>%
select(tvhours) %>% mean
gss_cat %>%
select(tvhours) %>% summarise(mean)
gss_cat %>%
summarise(promedio = mean(tvhours))
gss_cat %>%
summarise(promedio = mean(tvhours))
gss_cat %>%
summarise(promedio = mean(tvhours, na.rm = T))
gss_cat %>%
select(tvhours) %>%
summary
# Dibujamos la distribución
gss_cat %>%
filter(!is.na(tvhours)) %>%
ggplot(aes(x = tvhours)) +
geom_histogram(binwidth = 1)
# Dibujamos la distribución
gss_cat %>%
ggplot(aes(x = !is.na(tvhours))) +
geom_histogram(binwidth = 1)
# Dibujamos la distribución
gss_cat %>%
filter(!is.na(tvhours)) %>%
ggplot(aes(x = !is.na(tvhours))) +
geom_histogram(binwidth = 1)
# Dibujamos la distribución
gss_cat %>%
filter(!is.na(tvhours)) %>%
ggplot(aes(x = tvhours)) +
geom_histogram(binwidth = 1)
# Dibujamos la distribución
gss_cat %>%
filter(!is.na(tvhours)) %>% # Filtramos los NA
ggplot(aes(x = tvhours)) +
geom_histogram()
# Dibujamos la distribución
gss_cat %>%
filter(!is.na(tvhours)) %>% # Filtramos los NA
ggplot(aes(x = tvhours)) +
geom_histogram(bins = 24)
gss_cat %>% filter(partyid)
gss_cat %>% select(partyid)
gss_cat %>% select(partyid) %>%
levels
gss_cat %>% select(partyid) %>%
levels()
gss_cat %>% filter(!is.na(partyid)) %>%
count(partyid, sort = TRUE)
# Usamos fct_collapse para crear categorías
# Democrat: "Not str democrat", "Strong democrat"
# Republican: "Strong republican", "Not str republican"
# Independent: "Ind,near rep", "Independent", "Ind,near dem"
gss_cat %>%
# Usamos fct_collapse para crear categorías
# Democrat: "Not str democrat", "Strong democrat"
# Republican: "Strong republican", "Not str republican"
# Independent: "Ind,near rep", "Independent", "Ind,near dem"
gss_cat %>%
gss_cat %>%
mutate(partyid = fct_collapse(partyid, dem = c("Not str democrat", "Strong democrat"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"))) %>%
count(year, partyid) %>% # Seleccionamos por año
group_by(year) %>% # Agurpamos por año
mutate(prop = n / sum(n)) %>% # Calculamos la proporción
ggplot(aes(
x = year, y = p,
colour = fct_reorder2(partyid, year, p)
)) +
geom_point() +
geom_line() +
labs(colour = "Party ID."
# Usamos fct_collapse para crear categorías
# Democrat: "Not str democrat", "Strong democrat"
# Republican: "Strong republican", "Not str republican"
# Independent: "Ind,near rep", "Independent", "Ind,near dem"
gss_cat %>%
mutate(partyid = fct_collapse(partyid, dem = c("Not str democrat", "Strong democrat"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"))) %>%
count(year, partyid) %>% # Seleccionamos por año
group_by(year) %>% # Agurpamos por año
mutate(prop = n / sum(n)) %>% # Calculamos la proporción
ggplot(aes(
x = year, y = p,
colour = fct_reorder2(partyid, year, p)
)) +
geom_point() +
geom_line() +
labs(colour = "Party ID.")
install.packages("shinyWidgets")
shiny::runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
ruspini
data(ruspini)
library(ruspini)
library(hclust)
library(cluster)
ruspini
agriculture
# k-means only works with numerical variables,
# so don't give the user the option to select
# a categorical variable
data <- agriculture
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
USArrests
setdiff(names(iris), "Species")
names(USArrests)
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
plot(2:10, sapply(2:10,function(x) pam(USArrests,x)$silinfo$avg.width),
type = "l", xlab = "Number of medoids (k)",
ylab = "Average cluster width", main = "Average cluster width representation")
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
pam = pam(data)
pam = pam(USArrests, 4)
pam$clustering
pam$clusinfo
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1/app2.R')
runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1/app3.R')
runApp('app3.R')
shiny::runApp('C:/Users/albac/Desktop/MatEst/IAE/tarea_shiny_albcarcas1')
install.packages("esquisse")
esquisse:::esquisser()
setwd("C:/Users/albac/Desktop/MatEst/TFG/TFGAlba")
dataset <- read_csv("data/datasetADNI.csv")
library(tidyverse)
library(ggpubr)
dataset <- read_csv("data/datasetADNI.csv")
library(tidyverse)
library(ggpubr)
library(rcompanion)
library(corrr)
library(shapr)
#library(ggforce)
library(caret)
library(xgboost)
library(patchwork)
dataset <- read_csv("data/datasetADNI.csv")
dataset <- dataset[,c(-1,-9)] # Removing ID and DX variable
head(dataset)
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
mixed_assoc(dataset)
assocs <- dataset %>%
#select(-DXB) %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix
assocs2 = assocs
assocs2[assocs > 0] <- assocs[assocs > 0] + 0.9*assocs[assocs > 0]
assocs2[assocs < 0] <- assocs[assocs < 0] + 0.9*assocs[assocs < 0]
assocs = as_cordf(assocs)
assocs2 = as_cordf(assocs2)
network_plot(assocs2, min_cor = 0, colours = c("indianred2", "white", "steelblue4"))
assocs
network_plot(assocs2, min_cor = 0, colours = c("indianred2", "white", "steelblue4"))
network_plot(assocs, min_cor = 0, colours = c("indianred2", "white", "steelblue4"))
